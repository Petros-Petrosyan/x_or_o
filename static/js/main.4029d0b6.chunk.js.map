{"version":3,"sources":["components/ViewBoard/ViewBoard.module.scss","components/Cubes/Cubes.js","components/ViewBoard/ViewBoard.js","containers/Board/Board.js","index.js","components/Cubes/Cubes.module.scss"],"names":["module","exports","Cubes","props","value","cubeIndex","winnerPosition","changeCubeValueHandler","classNames","classes","cub","push","green","red","includes","winnerBg","className","join","onClick","ViewBoard","currentPlayer","lastCubes","isPlayerX","isOneStep","winnerPlayer","playerCount","startNewHandler","goBackStepHandler","startGameHandler","printCubes","map","cube","i","key","startBtn","previousStepBtn","currentPlayerText","length","main__button","content","main","main__start","main__start__section","main__container","winnerLines","Board","useState","Array","fill","cubes","setCubes","setIsPlayerX","setWinnerPlayer","setWinnerPosition","setPlayerCount","useEffect","calculateWinner","copiedLastCubes","update","$set","newCubes","$splice","LastLocalCube","_localWinnerPlayer","generateNextStepIndex","a","b","c","generateLogicalStep","player","logicalStep","aIsNull","bIsNull","cIsNull","randomStepIndex","filter","el","Math","floor","random","withOLogicalStepIndex","withXLogicalStepIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4029d0b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ViewBoard_main__FVTtB\",\"main__start\":\"ViewBoard_main__start__2PIFe\",\"main__start__section\":\"ViewBoard_main__start__section__3Iyec\",\"main__container\":\"ViewBoard_main__container__1vgzH\",\"main__button\":\"ViewBoard_main__button__ydx-r\"};","import React from 'react';\n\n// classes\nimport classes from './Cubes.module.scss';\n\n\nconst Cubes = (props) => {\n    const {\n        value,\n        cubeIndex,\n        winnerPosition,\n        changeCubeValueHandler,\n    } = props;\n\n    const classNames = [classes.cub];\n    if (value === 'X') {\n        classNames.push(classes.green)\n    } else {\n        classNames.push(classes.red)\n    }\n\n    if (winnerPosition && winnerPosition.includes(cubeIndex)) {\n        classNames.push(classes.winnerBg)\n    }\n\n    return (\n        <div\n            className={classNames.join(' ')}\n            onClick={() => changeCubeValueHandler(cubeIndex)}\n        >\n            {value}\n        </div>\n    )\n}\n\nexport { Cubes }","import React from 'react';\n\n// classes\nimport classes from './ViewBoard.module.scss';\n\n// components\nimport { Cubes } from '../';\n\n\nconst ViewBoard = (props) => {\n    const {\n        lastCubes,\n        winnerPosition,\n        isPlayerX,\n        isOneStep,\n        winnerPlayer,\n        playerCount,\n        changeCubeValueHandler,\n        startNewHandler,\n        goBackStepHandler,\n        startGameHandler\n    } = props;\n\n    const printCubes = lastCubes.map((cube, i) => {\n        return <Cubes\n            key={i}\n            value={cube}\n            winnerPosition={winnerPosition}\n            cubeIndex={i}\n            changeCubeValueHandler={changeCubeValueHandler}\n        />\n    });\n\n    let currentPlayer;\n    let startBtn = null;\n    let previousStepBtn = null;\n    if(winnerPlayer) {\n        let currentPlayerText = winnerPlayer.length > 1 ? winnerPlayer : `Winner Player: ${winnerPlayer}`;\n        currentPlayer = <h2>{currentPlayerText}</h2>\n        startBtn = (\n            <div className={classes.main__button}>\n                <button onClick={startNewHandler}>Start new</button>\n            </div>\n        );\n    } else {\n        currentPlayer = <h2>Player {isPlayerX ? 'X' : 'O'}</h2>\n        if (isOneStep) {\n            previousStepBtn = (\n                <div className={classes.main__button}>\n                    <button onClick={goBackStepHandler}>Back to the previous step</button>\n                </div>\n            )\n        }\n    }\n\n    let content = (\n        <main className={classes.main}>\n            <header><h1>Tic Tac Toe</h1></header>\n            <section className={classes.main__start}>\n                <div onClick={() => startGameHandler(2)} className={classes.main__start__section}>PLAY WITH FRIENDS</div>\n                <div onClick={() => startGameHandler(1)} className={classes.main__start__section}>PLAY WITH COMPUTER</div>\n            </section>\n        </main>\n    )\n\n    if (playerCount) {\n        content = (\n            <main className={classes.main}>\n                <header>\n                    <h1>Tic Tac Toe</h1>\n                    {currentPlayer}\n                </header>\n                <section className={classes.main__container}>\n                    {printCubes}\n                </section>\n                <footer>\n                    {startBtn}\n                    {previousStepBtn}\n                </footer>\n            </main>\n        )\n    }\n\n    return content\n}\n\nexport { ViewBoard }","import React, { useState, useEffect } from 'react';\nimport update from 'react-addons-update';\n\n// components\nimport { ViewBoard } from '../../components';\n\n// constants\nconst winnerLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\n\nconst Board = () => {\n    const [cubes, setCubes] = useState([Array(9).fill(null)]);\n    const [isPlayerX, setIsPlayerX] = useState(true);\n    const [winnerPlayer, setWinnerPlayer] = useState(null);\n    const [winnerPosition, setWinnerPosition] = useState(null);\n    const [playerCount, setPlayerCount] = useState(null);\n\n    useEffect(() => {\n        const {winnerPlayer, winnerPosition} = calculateWinner(cubes[cubes.length-1]);\n        setWinnerPosition(winnerPosition);\n        setWinnerPlayer(winnerPlayer);\n    }, [cubes]);\n\n    const startGame = (playerCount) => {\n        setPlayerCount(playerCount);\n    }\n\n    const changeCubeValue = (cubeIndex) => {\n        const lastCubes = cubes[cubes.length-1];\n        if (!winnerPlayer && lastCubes[cubeIndex] === null) {\n            const copiedLastCubes = update(lastCubes, {\n                [cubeIndex]: {$set: isPlayerX ? 'X' : 'O'}\n            });\n            const newCubes = update(cubes, {$splice: [[cubes.length, 0, copiedLastCubes]]})\n\n            const LastLocalCube = [...lastCubes];\n            LastLocalCube[cubeIndex] = 'X';\n            const {winnerPlayer: _localWinnerPlayer} = calculateWinner(LastLocalCube);\n\n            if (playerCount === 1 && !_localWinnerPlayer) {\n                const nextStepIndex = generateNextStepIndex(cubeIndex, cubes);\n                copiedLastCubes[nextStepIndex] = !isPlayerX ? 'X' : 'O';\n            } else {\n                setIsPlayerX(!isPlayerX);\n            }\n            setCubes(newCubes);\n        }\n    }\n\n    const startNew = () => {\n        setCubes([Array(9).fill(null)]);\n        setIsPlayerX(true);\n        setWinnerPlayer(null);\n        setWinnerPosition(null);\n        setPlayerCount(null);\n    }\n\n    const goBackStep = () => {\n        if (cubes.length > 1) {\n            const newCubes = update(cubes, {$splice: [[cubes.length-1, 1]]})\n            setCubes(newCubes);\n            if (playerCount !== 1) {\n                setIsPlayerX(!isPlayerX);\n            }\n        }\n    }\n\n    return (\n        <ViewBoard\n            lastCubes={cubes[cubes.length-1]}\n            winnerPosition={winnerPosition}\n            isPlayerX={isPlayerX}\n            isOneStep={cubes.length > 1}\n            winnerPlayer={winnerPlayer}\n            playerCount={playerCount}\n            startGameHandler={startGame}\n            changeCubeValueHandler={changeCubeValue}\n            startNewHandler={startNew}\n            goBackStepHandler={goBackStep}\n        />\n    )\n}\n\n\nfunction calculateWinner(cubes) {\n    for (let i = 0; i < winnerLines.length; i++) {\n        const [a, b, c] = winnerLines[i];\n        if (cubes[a] && cubes[a] === cubes[b] && cubes[a] === cubes[c]) {\n            return {\n                winnerPlayer: cubes[a],\n                winnerPosition: [a,b,c]\n            };\n        }\n    }\n    if (!cubes.includes(null)) {\n        return {\n            winnerPlayer: 'The game ended in a draw',\n            winnerPosition: null\n        };\n    }\n    return {\n        winnerPlayer: null,\n        winnerPosition: null\n    };\n}\n\nconst generateLogicalStep = (lastCubes, cubeIndex, player) => {\n    let logicalStep = false;\n    for (let i = 0; i < winnerLines.length; i++) {\n        const [a, b, c] = winnerLines[i];\n        const aIsNull = (lastCubes[b] && lastCubes[c]) && (lastCubes[b] === lastCubes[c] && lastCubes[c] === player) && (lastCubes[a] === null) && (cubeIndex !== a);\n        const bIsNull = (lastCubes[a] && lastCubes[c]) && (lastCubes[a] === lastCubes[c] && lastCubes[c] === player) && (lastCubes[b] === null) && (cubeIndex !== b);\n        const cIsNull = (lastCubes[a] && lastCubes[b]) && (lastCubes[a] === lastCubes[b] && lastCubes[b] === player) && (lastCubes[c] === null) && (cubeIndex !== c);\n\n        if (aIsNull) {\n            logicalStep = a;\n        } else if (bIsNull) {\n            logicalStep = b;\n        } else if (cIsNull) {\n            logicalStep = c;\n        }\n    }\n    return logicalStep;\n}\n\nconst generateNextStepIndex = (cubeIndex, cubes) => {\n    let lastCubes = [...cubes[cubes.length-1]];\n    lastCubes[cubeIndex] = 'X';\n    let randomStepIndex = null;\n    const freeCubes = lastCubes.filter((el) => el === null);\n\n    if (freeCubes.length > 1) {\n        while (true) {\n            randomStepIndex = Math.floor(Math.random() * 9);\n            if (lastCubes[randomStepIndex] === null && cubeIndex !== randomStepIndex) {\n                break;\n            }\n        }\n\n        const withOLogicalStepIndex = generateLogicalStep(lastCubes, cubeIndex, 'O');\n        const withXLogicalStepIndex = generateLogicalStep(lastCubes, cubeIndex, 'X');\n\n        if (withOLogicalStepIndex || withOLogicalStepIndex === 0) {\n            return withOLogicalStepIndex;\n        } else if (withXLogicalStepIndex || withXLogicalStepIndex === 0) {\n            return withXLogicalStepIndex;\n        } else {\n            return randomStepIndex\n        }\n    }\n}\n\nexport { Board };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Board } from './containers';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Board />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cub\":\"Cubes_cub__22Wsy\",\"green\":\"Cubes_green__176_A\",\"red\":\"Cubes_red__lSZk5\",\"winnerBg\":\"Cubes_winnerBg__w_Cj9\"};"],"sourceRoot":""}